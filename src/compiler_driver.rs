// Copyright (c) 2020 Ghaith Hachem and Mathias Rieder
//! Compiler Driver 
//! 
//! Provides options and methods to parse, validate, and generate files.
//!
//!

use std::{env, path::Path};

use inkwell::{OptimizationLevel, context::Context, module::Module, targets::{CodeModel, RelocMode, TargetMachine, TargetTriple}};

use crate::{Diagnostic, SourceContainer, ast::CompilationUnit, index::Index};

trait ErrorReporter {
    fn report(&self, diagnostic : Diagnostic);
}

pub enum OutputAction {
    Parse,
    Compile,
    //Link, //Still Unused
    IR,
    Bitcode,
}

struct TargetOptions {
    triple: TargetTriple,
    cpu: String,
    features: String, 
    level: OptimizationLevel,
    code_model: inkwell::targets::CodeModel,
}

impl Default for TargetOptions {
    fn default() -> Self {
        TargetOptions {
            triple: TargetMachine::get_default_triple(),
            cpu: TargetMachine::get_host_cpu_name().to_string(),
            features: TargetMachine::get_host_cpu_features().to_string(), 
            level: OptimizationLevel::Default,
            code_model: CodeModel::Default,
        }
    }
}

struct DriverContext<'llvm> {
    ast: Vec<CompilationUnit>,
    global_index: Option<Index>,
    context: Context,
    modules: Vec<Module<'llvm>>,
    diagnostics: Vec<Diagnostic>,
}

impl Default for DriverContext<'_> {
    fn default() -> Self {
        DriverContext {
            ast: Vec::default(),
            global_index: None,
            context: Context::create(),
            modules: Vec::default(),
            diagnostics: Vec::default(),
        }
    }
}

struct Driver<'source, 'llvm> {
    sources: &'source [&'source dyn SourceContainer],
    output: &'source str,
    workdir: Box<Path>, 
    target_options: TargetOptions,
    reloc_mode: RelocMode,
    output_option: OutputAction,
    context : DriverContext<'llvm>,
}

impl Default for Driver<'_,'_> {
    fn default() -> Self {
        Driver {
            sources: &[], 
            output: "a.out",
            workdir: env::temp_dir().into(),
            target_options : TargetOptions::default(),
            reloc_mode: RelocMode::Default,
            output_option: OutputAction::Compile,
            context: DriverContext::default(),
        }
    }
}

impl<'source, 'llvm> Driver<'source, 'llvm> {

    /// Registers the source located in the provided path to be used by the driver
    pub fn add_source_file(&mut self, path : &str) {
        unimplemented!()
    }

    /// Registers the source-code to be used by the driver
    pub fn add_source(&mut self, source : &str) {
        unimplemented!()
    }

    /// defines the output path for the compilation
    /// Default : a.out
    pub fn set_output(&mut self, path: &str) {
        unimplemented!()
    }

    /// Sets a working directory for possible temporary files generated by the compilation
    /// Defaults to the system's temp directory
    /// TODO Proposed:  Probably needed for linking or incremental compilation
    pub fn _add_workdir(&mut self, path : &str) {
        unimplemented!()
    }

    /// Sets the target triple for the compilation
    /// If not set, the default CPU target will be used
    pub fn set_target(&mut self, triple: &str) {
        unimplemented!()
    }

    /// Defines the output type
    /// Default is to generate an object file
    pub fn set_output_action(&mut self, action: OutputAction) {
        unimplemented!()
    }

    /// Reports all diagnostics resulting from the action methods using the Reporter
    pub fn report_errors(&self, reporter: &dyn ErrorReporter) {
        unimplemented!()
    }

    /// Restores a saved index from a saved path
    pub fn load_index(&self, path: &str) {
        unimplemented!()
    }

    /// Removes a previously saved index from the current index
    /// TODO Proposed: Used for incremental compiation
    pub fn _remove_index(&self, path: &str) {
        unimplemented!()
    }

    /// Generates from the current AST and Index an LLVM Module and persists it into the defined
    /// output
    pub fn run(&self) {
        unimplemented!()
    }

    /// Parses the provided sources.
    fn parse(&self) -> CompilationUnit {
        unimplemented!()
    }

    /// Indexes the result
    fn index(&self) -> Index {
        unimplemented!()
    }
}

